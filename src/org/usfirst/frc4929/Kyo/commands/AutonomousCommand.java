// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4929.Kyo.commands;

import org.usfirst.frc4929.Kyo.Robot;
import org.usfirst.frc4929.Kyo.RobotMap;
import org.usfirst.frc4929.Kyo.subsystems.DriveTrain;

import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class  AutonomousCommand extends Command {
	
	//Timer localTimer;



	public AutonomousCommand() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
    	requires(Robot.driveTrain);//
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    private void Drivedistance(double d) {
		// TODO Auto-generated method stub
		Drivedistance(2);
	}//

	// Called just before this Command runs the first time
    protected void initialize() {
   
    	//.start();
    }

    //alled repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    	
    	Robot.driveTrain.mecanumDriveAuto();
    	

        
        Timer.delay(0.005);	// wait 5ms to avoid hogging CPU cycles
        
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
 
    	Double stopSeconds = new Double(6);
    	
    	if (stopSeconds.equals(new Double(Timer.getMatchTime()))) {
    		return true;
    	} else {
    		return false;
    	}
    }

    // Called once after isFinished returns true
    protected void end() {
    	//localTimer.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
