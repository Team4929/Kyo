// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4929.Kyo;
    
import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainLeftR;
    public static SpeedController driveTrainLeftF;
    public static SpeedController driveTrainRightR;
    public static SpeedController driveTrainRightF;
    public static RobotDrive driveTrainRobotDrive41;
    public static DigitalInput driveTrainProximitySensor;
    public static SpeedController elevatorTopMo;
    public static DigitalInput elevatorLimitSwitchtop;
    public static DigitalInput elevatorLimitSwitchbottom;
    public static DoubleSolenoid clawDoubleSolenoid1;
    public static Compressor compressorCompressor1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftR = new Talon(0);
        LiveWindow.addActuator("DriveTrain", "LeftR", (Talon) driveTrainLeftR);
        
        driveTrainLeftF = new Talon(1);
        LiveWindow.addActuator("DriveTrain", "LeftF", (Talon) driveTrainLeftF);
        
        driveTrainRightR = new Talon(2);
        LiveWindow.addActuator("DriveTrain", "RightR", (Talon) driveTrainRightR);
        
        driveTrainRightF = new Talon(3);
        LiveWindow.addActuator("DriveTrain", "RightF", (Talon) driveTrainRightF);
        
        driveTrainRobotDrive41 = new RobotDrive(driveTrainLeftF, driveTrainLeftR,
              driveTrainRightF, driveTrainRightR);
        
        driveTrainRobotDrive41.setSafetyEnabled(true);
        driveTrainRobotDrive41.setExpiration(0.1);
        driveTrainRobotDrive41.setSensitivity(0.5);
        driveTrainRobotDrive41.setMaxOutput(1.0);

        driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        driveTrainProximitySensor = new DigitalInput(3);
        LiveWindow.addSensor("DriveTrain", "Proximity Sensor", driveTrainProximitySensor);
        
        elevatorTopMo = new Talon(4);
        LiveWindow.addActuator("Elevator", "TopMo", (Talon) elevatorTopMo);
        
        elevatorLimitSwitchtop = new DigitalInput(1);
        LiveWindow.addSensor("Elevator", "Limit Switch top", elevatorLimitSwitchtop);
        
        elevatorLimitSwitchbottom = new DigitalInput(0);
        LiveWindow.addSensor("Elevator", "Limit Switch bottom", elevatorLimitSwitchbottom);
        
        clawDoubleSolenoid1 = new DoubleSolenoid(0, 4, 5);      
        LiveWindow.addActuator("Claw", "Double Solenoid 1", clawDoubleSolenoid1);
        
        compressorCompressor1 = new Compressor(0);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
